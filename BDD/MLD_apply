--Conversions appliquer:
 -- AUTO_INCREMENT -> GENERATED BY DEFAULT AS IDENTITY
 -- DATETIME -> TIMESTAMP
 -- ENUM(...) -> TEXT with CHECK constraint
 -- TINYINT -> SMALLINT
 -- JSON -> JSONB
 -- ON UPDATE CURRENT_TIMESTAMP -> handled later by trigger (kept as DEFAULT now() only)
 -- FULLTEXT -> GIN index on to_tsvector for French ('simple' as default; adjust to 'french' if available)
 -- Duplicate "projects/project_tasks/..." block removed
 -- All CREATE INDEX kept separate after table creation

-- PostgreSQL schema for your CRM (no DROP statements)
-- Conventions:
-- * id: BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
-- * timestamps: created_at/updated_at default to now()
-- * ENUM replaced by TEXT + CHECK constraint
-- * JSON -> JSONB

-- ===============================
-- USERS / ROLES
-- ===============================

CREATE TABLE base_users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  status TEXT NOT NULL DEFAULT 'active' CHECK (status IN ('active','inactive','suspended')),
  last_login_at TIMESTAMP NULL,
  email_verified_at TIMESTAMP NULL,
  failed_login_attempts SMALLINT DEFAULT 0,
  locked_until TIMESTAMP NULL,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL,
  created_by BIGINT NULL
);
CREATE INDEX idx_base_users_status  ON base_users (status);
CREATE INDEX idx_base_users_deleted ON base_users (deleted_at);

CREATE TABLE admins (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  base_user_id BIGINT UNIQUE NOT NULL REFERENCES base_users(id) ON DELETE CASCADE,
  firstname VARCHAR(100) NOT NULL,
  lastname VARCHAR(100) NOT NULL,
  phone VARCHAR(20),
  permissions_level TEXT NOT NULL DEFAULT 'admin' CHECK (permissions_level IN ('super_admin','admin','limited_admin')),
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_admins_permissions ON admins (permissions_level);

CREATE TABLE external_technicians (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  base_user_id BIGINT UNIQUE NOT NULL REFERENCES base_users(id) ON DELETE CASCADE,
  firstname VARCHAR(100) NOT NULL,
  lastname VARCHAR(100) NOT NULL,
  phone VARCHAR(20),
  location VARCHAR(255),
  disponibilities JSONB,
  partner_id BIGINT,
  hourly_rate NUMERIC(8,2),
  specializations JSONB,
  certification_level VARCHAR(50),
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_external_tech_partner  ON external_technicians (partner_id);
CREATE INDEX idx_external_tech_location ON external_technicians (location);

CREATE TABLE internal_technicians (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  base_user_id BIGINT UNIQUE NOT NULL REFERENCES base_users(id) ON DELETE CASCADE,
  firstname VARCHAR(100) NOT NULL,
  lastname VARCHAR(100) NOT NULL,
  phone VARCHAR(20),
  location VARCHAR(255),
  disponibilities JSONB,
  employee_id VARCHAR(50) UNIQUE,
  department VARCHAR(100),
  manager_id BIGINT,
  salary_grade VARCHAR(20),
  specializations JSONB,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL,
  CONSTRAINT fk_internal_manager FOREIGN KEY (manager_id) REFERENCES internal_technicians(id)
);
CREATE INDEX idx_internal_tech_employee ON internal_technicians (employee_id);
CREATE INDEX idx_internal_tech_manager  ON internal_technicians (manager_id);

CREATE TABLE chef_projets (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  base_user_id BIGINT UNIQUE NOT NULL REFERENCES base_users(id) ON DELETE CASCADE,
  firstname VARCHAR(100) NOT NULL,
  lastname VARCHAR(100) NOT NULL,
  phone VARCHAR(20),
  location VARCHAR(255),
  disponibilities JSONB,
  employee_id VARCHAR(50) UNIQUE,
  department VARCHAR(100),
  max_concurrent_projects SMALLINT DEFAULT 5,
  certification_level VARCHAR(50),
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_chef_projets_employee ON chef_projets (employee_id);

CREATE TABLE support_users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  base_user_id BIGINT UNIQUE NOT NULL REFERENCES base_users(id) ON DELETE CASCADE,
  firstname VARCHAR(100) NOT NULL,
  lastname VARCHAR(100) NOT NULL,
  phone VARCHAR(20),
  support_level TEXT NOT NULL DEFAULT 'level1' CHECK (support_level IN ('level1','level2','level3')),
  languages_spoken JSONB,
  shift_schedule JSONB,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_support_level ON support_users (support_level);

CREATE TABLE adv_users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  base_user_id BIGINT UNIQUE NOT NULL REFERENCES base_users(id) ON DELETE CASCADE,
  firstname VARCHAR(100) NOT NULL,
  lastname VARCHAR(100) NOT NULL,
  phone VARCHAR(20),
  employee_id VARCHAR(50) UNIQUE,
  department VARCHAR(100),
  processing_capacity SMALLINT DEFAULT 10,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_adv_employee ON adv_users (employee_id);

CREATE TABLE commercials (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  base_user_id BIGINT UNIQUE NOT NULL REFERENCES base_users(id) ON DELETE CASCADE,
  firstname VARCHAR(100) NOT NULL,
  lastname VARCHAR(100) NOT NULL,
  phone VARCHAR(20),
  employee_id VARCHAR(50) UNIQUE,
  territory VARCHAR(255),
  commission_rate NUMERIC(5,2) DEFAULT 0.00,
  sales_target_monthly NUMERIC(12,2),
  manager_id BIGINT REFERENCES commercials(id),
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_commercials_employee ON commercials (employee_id);
CREATE INDEX idx_commercials_manager  ON commercials (manager_id);

CREATE TABLE compta_users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  base_user_id BIGINT UNIQUE NOT NULL REFERENCES base_users(id) ON DELETE CASCADE,
  firstname VARCHAR(100) NOT NULL,
  lastname VARCHAR(100) NOT NULL,
  phone VARCHAR(20),
  employee_id VARCHAR(50) UNIQUE,
  access_level TEXT NOT NULL DEFAULT 'junior' CHECK (access_level IN ('junior','senior','manager')),
  signature_limit NUMERIC(12,2) DEFAULT 0.00,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_compta_employee ON compta_users (employee_id);
CREATE INDEX idx_compta_access   ON compta_users (access_level);

CREATE TABLE user_additional_roles (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  base_user_id BIGINT NOT NULL REFERENCES base_users(id) ON DELETE CASCADE,
  role_type TEXT NOT NULL CHECK (role_type IN ('admin','external_technician','internal_technician','chef_projet','support','adv','commercial','compta')),
  role_id BIGINT NOT NULL,
  is_primary BOOLEAN DEFAULT FALSE,
  assigned_at TIMESTAMP NOT NULL DEFAULT now(),
  assigned_by BIGINT,
  expires_at TIMESTAMP NULL
);
CREATE INDEX idx_user_roles         ON user_additional_roles (base_user_id, role_type);
CREATE INDEX idx_user_roles_primary ON user_additional_roles (base_user_id, is_primary);

-- ===============================
-- CLIENTS & PARTENAIRES
-- ===============================

CREATE TABLE commercials_dummy_ref (
  id BIGINT PRIMARY KEY
);
-- Note: if commercials is already created (above), we don't need this dummy. Keeping foreign key to commercials.
-- We'll simply reference commercials(id).

CREATE TABLE clients (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  company_name VARCHAR(255) NOT NULL,
  contact_firstname VARCHAR(100),
  contact_lastname VARCHAR(100),
  email VARCHAR(255),
  phone VARCHAR(20),
  address TEXT,
  city VARCHAR(100),
  postal_code VARCHAR(20),
  country VARCHAR(100) DEFAULT 'France',
  siret VARCHAR(14),
  vat_number VARCHAR(20),
  status TEXT NOT NULL DEFAULT 'prospect' CHECK (status IN ('active','inactive','prospect','suspended')),
  assigned_commercial_id BIGINT REFERENCES commercials(id),
  credit_limit NUMERIC(12,2) DEFAULT 0.00,
  payment_terms SMALLINT DEFAULT 30,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_clients_status     ON clients (status);
CREATE INDEX idx_clients_commercial ON clients (assigned_commercial_id);
CREATE INDEX idx_clients_company    ON clients (company_name);

CREATE TABLE partners (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  partner_name VARCHAR(255) NOT NULL,
  contact_firstname VARCHAR(100),
  contact_lastname VARCHAR(100),
  email VARCHAR(255),
  phone VARCHAR(20),
  address TEXT,
  city VARCHAR(100),
  postal_code VARCHAR(20),
  country VARCHAR(100) DEFAULT 'France',
  siret VARCHAR(14),
  vat_number VARCHAR(20),
  partner_type TEXT NOT NULL DEFAULT 'reseller' CHECK (partner_type IN ('reseller','installer','maintenance','hybrid')),
  commission_rate NUMERIC(5,2) DEFAULT 0.00,
  status TEXT NOT NULL DEFAULT 'pending_approval' CHECK (status IN ('active','inactive','suspended','pending_approval')),
  contract_start_date DATE,
  contract_end_date DATE,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_partners_status ON partners (status);
CREATE INDEX idx_partners_type   ON partners (partner_type);

-- ===============================
-- TICKETS & HISTORY
-- ===============================

CREATE TABLE tickets (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  domain VARCHAR(100),
  priority TEXT NOT NULL DEFAULT 'medium' CHECK (priority IN ('low','medium','high','critical')),
  deadline TIMESTAMP NULL,
  status TEXT NOT NULL DEFAULT 'open' CHECK (status IN ('open','assigned','in_progress','pending_client','resolved','closed','cancelled')),
  partner_id BIGINT REFERENCES partners(id),
  client_id BIGINT NOT NULL REFERENCES clients(id),
  assigned_technician_id BIGINT NULL,
  assigned_technician_type TEXT NULL CHECK (assigned_technician_type IN ('internal','external')),
  created_by_user_id BIGINT NOT NULL,
  created_by_user_type VARCHAR(50) NOT NULL,
  estimated_hours NUMERIC(5,2),
  actual_hours NUMERIC(5,2),
  billable_hours NUMERIC(5,2),
  resolution_notes TEXT,
  client_satisfaction SMALLINT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  closed_at TIMESTAMP NULL,
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_tickets_status     ON tickets (status);
CREATE INDEX idx_tickets_priority   ON tickets (priority);
CREATE INDEX idx_tickets_client     ON tickets (client_id);
CREATE INDEX idx_tickets_assigned   ON tickets (assigned_technician_id, assigned_technician_type);
CREATE INDEX idx_tickets_created_at ON tickets (created_at);

CREATE TABLE ticket_history (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ticket_id BIGINT NOT NULL REFERENCES tickets(id) ON DELETE CASCADE,
  user_id BIGINT NOT NULL,
  user_type VARCHAR(50) NOT NULL,
  action VARCHAR(100) NOT NULL,
  old_values JSONB,
  new_values JSONB,
  comment TEXT,
  is_internal BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_ticket_history_ticket ON ticket_history (ticket_id);
CREATE INDEX idx_ticket_history_user   ON ticket_history (user_id, user_type);

-- ===============================
-- SECURITY & SESSIONS & AUDIT
-- ===============================

CREATE TABLE audit_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  table_name VARCHAR(100) NOT NULL,
  record_id BIGINT NOT NULL,
  action TEXT NOT NULL CHECK (action IN ('INSERT','UPDATE','DELETE','SELECT')),
  old_values JSONB,
  new_values JSONB,
  user_id BIGINT,
  user_type VARCHAR(50),
  ip_address VARCHAR(45),
  user_agent TEXT,
  session_id VARCHAR(128),
  request_id VARCHAR(36),
  created_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_audit_logs_table  ON audit_logs (table_name, record_id);
CREATE INDEX idx_audit_logs_user   ON audit_logs (user_id, user_type);
CREATE INDEX idx_audit_logs_action ON audit_logs (action);
CREATE INDEX idx_audit_logs_date   ON audit_logs (created_at);

CREATE TABLE user_sessions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL,
  user_type VARCHAR(50) NOT NULL,
  session_token VARCHAR(128) UNIQUE NOT NULL,
  refresh_token VARCHAR(128) UNIQUE,
  ip_address VARCHAR(45) NOT NULL,
  user_agent TEXT,
  device_fingerprint VARCHAR(64),
  is_active BOOLEAN DEFAULT TRUE,
  last_activity TIMESTAMP NOT NULL DEFAULT now(),
  expires_at TIMESTAMP NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_user_sessions_user   ON user_sessions (user_id, user_type);
CREATE INDEX idx_user_sessions_active ON user_sessions (is_active, expires_at);

-- ===============================
-- UTIL TABLES
-- ===============================

CREATE TABLE disponibilites (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL,
  user_type VARCHAR(50) NOT NULL,
  day_of_week SMALLINT NOT NULL CHECK (day_of_week BETWEEN 1 AND 7),
  start_time TIME NOT NULL,
  end_time TIME NOT NULL,
  is_available BOOLEAN DEFAULT TRUE,
  break_start_time TIME,
  break_end_time TIME,
  max_interventions SMALLINT DEFAULT 1,
  travel_radius_km SMALLINT DEFAULT 50,
  hourly_rate NUMERIC(8,2),
  overtime_rate NUMERIC(8,2),
  effective_from DATE NOT NULL,
  effective_to DATE,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_disponibilites_user     ON disponibilites (user_id, user_type);
CREATE INDEX idx_disponibilites_day      ON disponibilites (day_of_week);
CREATE INDEX idx_disponibilites_effective ON disponibilites (effective_from, effective_to);

-- ===============================
-- PLANNING & INTERVENTIONS
-- ===============================

CREATE TABLE interventions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ticket_id BIGINT NOT NULL REFERENCES tickets(id),
  intervention_date DATE NOT NULL,
  start_datetime TIMESTAMP,
  end_datetime TIMESTAMP,
  external_technician_id BIGINT,
  chefprojet_id BIGINT,
  status TEXT NOT NULL DEFAULT 'scheduled' CHECK (status IN ('scheduled','in_progress','completed','cancelled','postponed')),
  type_intervention VARCHAR(100),
  location VARCHAR(255),
  notes TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_interventions_ticket       ON interventions (ticket_id);
CREATE INDEX idx_interventions_date         ON interventions (intervention_date);
CREATE INDEX idx_interventions_external_tech ON interventions (external_technician_id);
CREATE INDEX idx_interventions_chef         ON interventions (chefprojet_id);
CREATE INDEX idx_interventions_status       ON interventions (status);

CREATE TABLE documentation (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  intervention_id BIGINT REFERENCES interventions(id),
  title VARCHAR(255) NOT NULL,
  description TEXT,
  photo VARCHAR(500),
  contrainte TEXT,
  technician_note TEXT,
  chef_projet_note TEXT,
  external_technician_id BIGINT,
  chef_projet_id BIGINT,
  intervention_date DATE,
  intervention_starting_date TIMESTAMP,
  intervention_ending_date TIMESTAMP,
  document_type TEXT NOT NULL DEFAULT 'report' CHECK (document_type IN ('photo','report','checklist','other')),
  file_path VARCHAR(500),
  date_creation TIMESTAMP NOT NULL DEFAULT now(),
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_documentation_intervention  ON documentation (intervention_id);
CREATE INDEX idx_documentation_external_tech ON documentation (external_technician_id);
CREATE INDEX idx_documentation_chef          ON documentation (chef_projet_id);
CREATE INDEX idx_documentation_date          ON documentation (intervention_date);

-- ===============================
-- ADV / SALES / ORDERS / BILLING
-- ===============================

CREATE TABLE leads (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  company_name VARCHAR(255) NOT NULL,
  contact_person VARCHAR(200),
  email VARCHAR(255),
  phone VARCHAR(20),
  source VARCHAR(100),
  status TEXT NOT NULL DEFAULT 'new' CHECK (status IN ('new','contacted','qualified','converted','lost')),
  assigned_comercial_id BIGINT,
  qualification_score SMALLINT DEFAULT 0,
  date_creation TIMESTAMP NOT NULL DEFAULT now(),
  date_last_contact TIMESTAMP NULL,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_leads_status      ON leads (status);
CREATE INDEX idx_leads_commercial  ON leads (assigned_comercial_id);
CREATE INDEX idx_leads_source      ON leads (source);

CREATE TABLE opportunities (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  lead_id BIGINT,
  client_id BIGINT,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  estimated_values NUMERIC(12,2),
  probability SMALLINT DEFAULT 0,
  stage TEXT NOT NULL DEFAULT 'prospecting' CHECK (stage IN ('prospecting','qualification','proposal','negotiation','closing','won','lost')),
  expected_close_date DATE,
  assigned_commercial_id BIGINT,
  date_creation TIMESTAMP NOT NULL DEFAULT now(),
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_opportunities_lead       ON opportunities (lead_id);
CREATE INDEX idx_opportunities_client     ON opportunities (client_id);
CREATE INDEX idx_opportunities_commercial ON opportunities (assigned_commercial_id);
CREATE INDEX idx_opportunities_stage      ON opportunities (stage);

CREATE TABLE products_services (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  category_id BIGINT,
  unit_price NUMERIC(10,2) NOT NULL,
  cost_price NUMERIC(10,2),
  is_active BOOLEAN DEFAULT TRUE,
  sku VARCHAR(100) UNIQUE,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_products_category ON products_services (category_id);
CREATE INDEX idx_products_active   ON products_services (is_active);

CREATE TABLE product_categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  parent_category_id BIGINT,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_product_categories_parent ON product_categories (parent_category_id);

CREATE TABLE quotes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  opportunity_id BIGINT,
  client_id BIGINT NOT NULL,
  quote_number VARCHAR(50) UNIQUE NOT NULL,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  total_amount NUMERIC(12,2) NOT NULL,
  tax_amount NUMERIC(12,2) DEFAULT 0.00,
  status TEXT NOT NULL DEFAULT 'draft' CHECK (status IN ('draft','sent','accepted','rejected','expired')),
  validity_date DATE,
  created_by_user_id BIGINT NOT NULL,
  date_creation TIMESTAMP NOT NULL DEFAULT now(),
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_quotes_client     ON quotes (client_id);
CREATE INDEX idx_quotes_opportunity ON quotes (opportunity_id);
CREATE INDEX idx_quotes_status     ON quotes (status);
CREATE INDEX idx_quotes_number     ON quotes (quote_number);

CREATE TABLE quote_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  quote_id BIGINT NOT NULL REFERENCES quotes(id) ON DELETE CASCADE,
  product_service_id BIGINT,
  description TEXT,
  quantity NUMERIC(10,2) NOT NULL,
  unit_price NUMERIC(10,2) NOT NULL,
  total_price NUMERIC(12,2) NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_quote_items_quote   ON quote_items (quote_id);
CREATE INDEX idx_quote_items_product ON quote_items (product_service_id);

CREATE TABLE orders (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  client_id BIGINT NOT NULL REFERENCES clients(id),
  quote_id BIGINT,
  order_number VARCHAR(50) UNIQUE NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending','confirmed','in_production','shipped','delivered','cancelled')),
  order_date DATE NOT NULL,
  delivery_date DATE,
  shipping_address TEXT,
  billing_address TEXT,
  total_amount NUMERIC(12,2) NOT NULL,
  assigned_adv_id BIGINT,
  notes TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_orders_client  ON orders (client_id);
CREATE INDEX idx_orders_quote   ON orders (quote_id);
CREATE INDEX idx_orders_status  ON orders (status);
CREATE INDEX idx_orders_adv     ON orders (assigned_adv_id);
CREATE INDEX idx_orders_number  ON orders (order_number);

CREATE TABLE order_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
  product_service_id BIGINT NOT NULL,
  description TEXT,
  quantity NUMERIC(10,2) NOT NULL,
  unit_price NUMERIC(10,2) NOT NULL,
  total_price NUMERIC(12,2) NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_order_items_order   ON order_items (order_id);
CREATE INDEX idx_order_items_product ON order_items (product_service_id);

CREATE TABLE deliveries (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
  delivery_date DATE NOT NULL,
  delivery_address TEXT NOT NULL,
  carrier VARCHAR(100),
  tracking_number VARCHAR(100),
  status TEXT NOT NULL DEFAULT 'scheduled' CHECK (status IN ('scheduled','in_transit','delivered','failed','returned')),
  delivered_by_user_id BIGINT,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_deliveries_order ON deliveries (order_id);
CREATE INDEX idx_deliveries_status ON deliveries (status);
CREATE INDEX idx_deliveries_date ON deliveries (delivery_date);

CREATE TABLE invoices (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT,
  client_id BIGINT NOT NULL REFERENCES clients(id),
  invoice_number VARCHAR(50) UNIQUE NOT NULL,
  invoice_date DATE NOT NULL,
  due_date DATE NOT NULL,
  total_amount NUMERIC(12,2) NOT NULL,
  tax_amount NUMERIC(12,2) DEFAULT 0.00,
  status TEXT NOT NULL DEFAULT 'draft' CHECK (status IN ('draft','sent','paid','overdue','cancelled')),
  payment_terms SMALLINT DEFAULT 30,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_invoices_order   ON invoices (order_id);
CREATE INDEX idx_invoices_status  ON invoices (status);
CREATE INDEX idx_invoices_number  ON invoices (invoice_number);
CREATE INDEX idx_invoices_due_date ON invoices (due_date);

CREATE TABLE invoice_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  invoice_id BIGINT NOT NULL REFERENCES invoices(id) ON DELETE CASCADE,
  description TEXT NOT NULL,
  quantity NUMERIC(10,2) NOT NULL,
  unit_price NUMERIC(10,2) NOT NULL,
  tax_rate NUMERIC(5,2) DEFAULT 20.00,
  total_price NUMERIC(12,2) NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_invoice_items_invoice ON invoice_items (invoice_id);

CREATE TABLE payments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  invoice_id BIGINT NOT NULL REFERENCES invoices(id) ON DELETE CASCADE,
  payment_date DATE NOT NULL,
  amount NUMERIC(12,2) NOT NULL,
  payment_method TEXT NOT NULL CHECK (payment_method IN ('cash','check','bank_transfer','credit_card','other')),
  reference VARCHAR(100),
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending','completed','failed','cancelled')),
  processed_by_user_id BIGINT NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_payments_invoice ON payments (invoice_id);
CREATE INDEX idx_payments_status  ON payments (status);
CREATE INDEX idx_payments_date    ON payments (payment_date);

-- ===============================
-- PROJECTS
-- ===============================

CREATE TABLE projects (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  client_id BIGINT NOT NULL REFERENCES clients(id),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  start_date DATE,
  end_date DATE,
  status TEXT NOT NULL DEFAULT 'planning' CHECK (status IN ('planning','active','on_hold','completed','cancelled')),
  budget NUMERIC(12,2),
  assigned_chef_projet_id BIGINT,
  completion_percentage SMALLINT DEFAULT 0,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_projects_client ON projects (client_id);
CREATE INDEX idx_projects_chef   ON projects (assigned_chef_projet_id);
CREATE INDEX idx_projects_status ON projects (status);
CREATE INDEX idx_projects_dates  ON projects (start_date, end_date);

CREATE TABLE project_tasks (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  project_id BIGINT NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  assigned_user_id BIGINT,
  start_date DATE,
  due_date DATE,
  status TEXT NOT NULL DEFAULT 'not_started' CHECK (status IN ('not_started','in_progress','completed','on_hold','cancelled')),
  priority TEXT NOT NULL DEFAULT 'medium' CHECK (priority IN ('low','medium','high','critical')),
  estimated_hours NUMERIC(6,2),
  actual_hours NUMERIC(6,2) DEFAULT 0.00,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_project_tasks_project ON project_tasks (project_id);
CREATE INDEX idx_project_tasks_assigned ON project_tasks (assigned_user_id);
CREATE INDEX idx_project_tasks_status  ON project_tasks (status);
CREATE INDEX idx_project_tasks_dates   ON project_tasks (start_date, due_date);

CREATE TABLE project_milestones (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  project_id BIGINT NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  due_date DATE NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending','completed','overdue','cancelled')),
  completion_date DATE,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_project_milestones_project  ON project_milestones (project_id);
CREATE INDEX idx_project_milestones_due_date ON project_milestones (due_date);
CREATE INDEX idx_project_milestones_status   ON project_milestones (status);

CREATE TABLE resource_allocation (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  project_id BIGINT NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
  user_id BIGINT NOT NULL,
  allocated_hours NUMERIC(6,2) NOT NULL,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  rate_per_hour NUMERIC(8,2),
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_resource_allocation_project ON resource_allocation (project_id);
CREATE INDEX idx_resource_allocation_user    ON resource_allocation (user_id);
CREATE INDEX idx_resource_allocation_dates   ON resource_allocation (start_date, end_date);

CREATE TABLE timesheets (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL,
  project_id BIGINT,
  task_id BIGINT,
  date DATE NOT NULL,
  hours_worked NUMERIC(4,2) NOT NULL,
  description TEXT,
  is_billable BOOLEAN DEFAULT TRUE,
  hourly_rate NUMERIC(8,2),
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_timesheets_user    ON timesheets (user_id);
CREATE INDEX idx_timesheets_project ON timesheets (project_id);
CREATE INDEX idx_timesheets_task    ON timesheets (task_id);
CREATE INDEX idx_timesheets_date    ON timesheets (date);

-- ===============================
-- CONTRACTS & MAINTENANCE
-- ===============================

CREATE TABLE contracts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  client_id BIGINT NOT NULL REFERENCES clients(id),
  contract_number VARCHAR(50) UNIQUE NOT NULL,
  title VARCHAR(255) NOT NULL,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  value NUMERIC(12,2) NOT NULL,
  status TEXT NOT NULL DEFAULT 'draft' CHECK (status IN ('draft','active','expired','terminated')),
  contract_type VARCHAR(100),
  renewal_terms TEXT,
  assigned_user_id BIGINT,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_contracts_client ON contracts (client_id);
CREATE INDEX idx_contracts_status ON contracts (status);
CREATE INDEX idx_contracts_dates  ON contracts (start_date, end_date);
CREATE INDEX idx_contracts_number ON contracts (contract_number);

CREATE TABLE contract_services (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  contract_id BIGINT NOT NULL REFERENCES contracts(id) ON DELETE CASCADE,
  service_description TEXT NOT NULL,
  sla_terms TEXT,
  billing_frequency TEXT NOT NULL DEFAULT 'monthly' CHECK (billing_frequency IN ('monthly','quarterly','annual')),
  unit_price NUMERIC(10,2) NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_contract_services_contract ON contract_services (contract_id);

CREATE TABLE sla_metrics (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  contract_id BIGINT NOT NULL REFERENCES contracts(id) ON DELETE CASCADE,
  metric_name VARCHAR(100) NOT NULL,
  target_value NUMERIC(8,2) NOT NULL,
  measurement_unit VARCHAR(50) NOT NULL,
  penalty_clause TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_sla_metrics_contract ON sla_metrics (contract_id);

CREATE TABLE maintenance_schedules (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  contract_id BIGINT NOT NULL REFERENCES contracts(id) ON DELETE CASCADE,
  equipment_id BIGINT,
  frequency TEXT NOT NULL CHECK (frequency IN ('weekly','monthly','quarterly','annual')),
  next_maintenance_date DATE NOT NULL,
  assigned_technician_id BIGINT,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_maintenance_schedules_contract ON maintenance_schedules (contract_id);
CREATE INDEX idx_maintenance_schedules_equipment ON maintenance_schedules (equipment_id);
CREATE INDEX idx_maintenance_schedules_next_date ON maintenance_schedules (next_maintenance_date);

-- ===============================
-- COMMUNICATIONS & MARKETING
-- ===============================

CREATE TABLE campaigns (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  type TEXT NOT NULL CHECK (type IN ('email','sms','phone','direct_mail','mixed')),
  start_date DATE,
  end_date DATE,
  budget NUMERIC(12,2),
  status TEXT NOT NULL DEFAULT 'draft' CHECK (status IN ('draft','active','paused','completed','cancelled')),
  assigned_commercial_id BIGINT,
  target_audience TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_campaigns_status ON campaigns (status);
CREATE INDEX idx_campaigns_type   ON campaigns (type);
CREATE INDEX idx_campaigns_commercial ON campaigns (assigned_commercial_id);

CREATE TABLE campaign_leads (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  campaign_id BIGINT NOT NULL REFERENCES campaigns(id) ON DELETE CASCADE,
  lead_id BIGINT NOT NULL,
  conversion_status TEXT NOT NULL DEFAULT 'contacted' CHECK (conversion_status IN ('contacted','interested','qualified','converted','lost')),
  date_added TIMESTAMP NOT NULL DEFAULT now(),
  created_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_campaign_leads_campaign ON campaign_leads (campaign_id);
CREATE INDEX idx_campaign_leads_lead     ON campaign_leads (lead_id);
CREATE INDEX idx_campaign_leads_status   ON campaign_leads (conversion_status);

CREATE TABLE email_templates (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  subject VARCHAR(255) NOT NULL,
  content TEXT NOT NULL,
  template_type TEXT NOT NULL CHECK (template_type IN ('marketing','transactional','notification')),
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_email_templates_type   ON email_templates (template_type);
CREATE INDEX idx_email_templates_active ON email_templates (is_active);

CREATE TABLE notifications (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL,
  title VARCHAR(255) NOT NULL,
  message TEXT NOT NULL,
  type TEXT NOT NULL DEFAULT 'info' CHECK (type IN ('info','warning','error','success')),
  is_read BOOLEAN DEFAULT FALSE,
  date_creation TIMESTAMP NOT NULL DEFAULT now(),
  reference_type VARCHAR(50),
  reference_id BIGINT,
  created_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_notifications_user      ON notifications (user_id);
CREATE INDEX idx_notifications_unread    ON notifications (is_read);
CREATE INDEX idx_notifications_type      ON notifications (type);
CREATE INDEX idx_notifications_reference ON notifications (reference_type, reference_id);

CREATE TABLE activities (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL,
  activity_type TEXT NOT NULL CHECK (activity_type IN ('login','logout','create','update','delete','view','email','call')),
  reference_type VARCHAR(50),
  reference_id BIGINT,
  description TEXT NOT NULL,
  date_activity TIMESTAMP NOT NULL DEFAULT now(),
  created_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_activities_user      ON activities (user_id);
CREATE INDEX idx_activities_type      ON activities (activity_type);
CREATE INDEX idx_activities_date      ON activities (date_activity);
CREATE INDEX idx_activities_reference ON activities (reference_type, reference_id);

-- ===============================
-- ADMIN / DOC / WORKFLOWS / SETTINGS
-- ===============================

CREATE TABLE documents (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  reference_type VARCHAR(50) NOT NULL,
  reference_id BIGINT NOT NULL,
  document_name VARCHAR(255) NOT NULL,
  file_path VARCHAR(500) NOT NULL,
  document_type VARCHAR(100),
  uploaded_by_user_id BIGINT NOT NULL,
  upload_date TIMESTAMP NOT NULL DEFAULT now(),
  access_level TEXT NOT NULL DEFAULT 'internal' CHECK (access_level IN ('public','internal','restricted')),
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_documents_reference ON documents (reference_type, reference_id);
CREATE INDEX idx_documents_type      ON documents (document_type);
CREATE INDEX idx_documents_uploader  ON documents (uploaded_by_user_id);
CREATE INDEX idx_documents_access    ON documents (access_level);

CREATE TABLE approval_workflows (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  reference_type VARCHAR(50) NOT NULL,
  reference_id BIGINT NOT NULL,
  current_step SMALLINT DEFAULT 1,
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending','approved','rejected','cancelled')),
  created_by_user_id BIGINT NOT NULL,
  date_creation TIMESTAMP NOT NULL DEFAULT now(),
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_approval_workflows_reference ON approval_workflows (reference_type, reference_id);
CREATE INDEX idx_approval_workflows_status    ON approval_workflows (status);
CREATE INDEX idx_approval_workflows_creator   ON approval_workflows (created_by_user_id);

CREATE TABLE workflow_steps (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  workflow_id BIGINT NOT NULL REFERENCES approval_workflows(id) ON DELETE CASCADE,
  step_order SMALLINT NOT NULL,
  assigned_user_id BIGINT NOT NULL,
  action_required VARCHAR(255) NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending','completed','skipped')),
  completion_date TIMESTAMP NULL,
  comments TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_workflow_steps_workflow ON workflow_steps (workflow_id);
CREATE INDEX idx_workflow_steps_assigned ON workflow_steps (assigned_user_id);
CREATE INDEX idx_workflow_steps_status   ON workflow_steps (status);

CREATE TABLE settings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  setting_key VARCHAR(100) UNIQUE NOT NULL,
  setting_value TEXT,
  description TEXT,
  is_system BOOLEAN DEFAULT FALSE,
  updated_by_user_id BIGINT,
  date_updated TIMESTAMP NOT NULL DEFAULT now(),
  created_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_settings_key    ON settings (setting_key);
CREATE INDEX idx_settings_system ON settings (is_system);

-- ===============================
-- QUALITY / KB / FAQ / FEEDBACK
-- ===============================

CREATE TABLE knowledge_base (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  content TEXT NOT NULL,
  category_id BIGINT,
  tags JSONB,
  created_by_user_id BIGINT NOT NULL,
  date_creation TIMESTAMP NOT NULL DEFAULT now(),
  is_public BOOLEAN DEFAULT FALSE,
  view_count INT DEFAULT 0,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
-- Full-text search GIN on title+content (use 'french' if the extension is installed)
CREATE INDEX idx_knowledge_base_search ON knowledge_base USING GIN (to_tsvector('simple', coalesce(title,'') || ' ' || coalesce(content,'')));
CREATE INDEX idx_knowledge_base_category ON knowledge_base (category_id);
CREATE INDEX idx_knowledge_base_public   ON knowledge_base (is_public);
CREATE INDEX idx_knowledge_base_creator  ON knowledge_base (created_by_user_id);

CREATE TABLE faq (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  question TEXT NOT NULL,
  answer TEXT NOT NULL,
  category_id BIGINT,
  is_active BOOLEAN DEFAULT TRUE,
  created_by_user_id BIGINT NOT NULL,
  date_creation TIMESTAMP NOT NULL DEFAULT now(),
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_faq_category ON faq (category_id);
CREATE INDEX idx_faq_active   ON faq (is_active);
CREATE INDEX idx_faq_creator  ON faq (created_by_user_id);
CREATE INDEX idx_faq_search   ON faq USING GIN (to_tsvector('simple', coalesce(question,'') || ' ' || coalesce(answer,'')));

CREATE TABLE customer_feedback (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  client_id BIGINT NOT NULL REFERENCES clients(id),
  ticket_id BIGINT,
  rating SMALLINT NOT NULL CHECK (rating BETWEEN 1 AND 5),
  feedback_text TEXT,
  feedback_type TEXT NOT NULL DEFAULT 'overall' CHECK (feedback_type IN ('service_quality','response_time','technical_expertise','overall')),
  date_creation TIMESTAMP NOT NULL DEFAULT now(),
  created_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_customer_feedback_client  ON customer_feedback (client_id);
CREATE INDEX idx_customer_feedback_ticket  ON customer_feedback (ticket_id);
CREATE INDEX idx_customer_feedback_rating  ON customer_feedback (rating);
CREATE INDEX idx_customer_feedback_type    ON customer_feedback (feedback_type);

CREATE TABLE quality_controls (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  intervention_id BIGINT NOT NULL REFERENCES interventions(id) ON DELETE CASCADE,
  checklist_id BIGINT NOT NULL,
  performed_by_user_id BIGINT NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending','completed','failed')),
  completion_date TIMESTAMP NULL,
  notes TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now()
);
CREATE INDEX idx_quality_controls_intervention ON quality_controls (intervention_id);
CREATE INDEX idx_quality_controls_checklist    ON quality_controls (checklist_id);
CREATE INDEX idx_quality_controls_performer    ON quality_controls (performed_by_user_id);
CREATE INDEX idx_quality_controls_status       ON quality_controls (status);

CREATE TABLE checklists (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  checklist_items JSONB NOT NULL,
  applicable_to VARCHAR(100),
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_checklists_applicable ON checklists (applicable_to);

-- ===============================
-- COMMENTS
-- ===============================

CREATE TABLE comments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ticket_id BIGINT,
  user_id BIGINT NOT NULL,
  message TEXT NOT NULL,
  is_internal BOOLEAN DEFAULT TRUE,
  date_creation TIMESTAMP NOT NULL DEFAULT now(),
  attachments JSONB,
  created_at TIMESTAMP NOT NULL DEFAULT now(),
  updated_at TIMESTAMP NOT NULL DEFAULT now(),
  deleted_at TIMESTAMP NULL
);
CREATE INDEX idx_comments_ticket   ON comments (ticket_id);
CREATE INDEX idx_comments_user     ON comments (user_id);
CREATE INDEX idx_comments_internal ON comments (is_internal);
CREATE INDEX idx_comments_date     ON comments (date_creation);

-- Optional: update trigger for updated_at (define once and attach to tables as needed)
-- CREATE OR REPLACE FUNCTION set_updated_at() RETURNS trigger AS $$
-- BEGIN NEW.updated_at := now(); RETURN NEW; END; $$ LANGUAGE plpgsql;
-- Then: CREATE TRIGGER ... BEFORE UPDATE ON <table> FOR EACH ROW EXECUTE FUNCTION set_updated_at();




